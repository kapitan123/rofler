name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]
    #paths:
    #  - folder1/**
  workflow_dispatch:
     inputs:
       env:
         description: Environment
         default: prod
         required: true
env:
  IMAGE_NAME: ""
jobs: 
    # AK TODO nice candidate for reusable workflow
    deploy-infra:
      name: Terraform 
      environment: prod
      runs-on: ubuntu-latest
      env:
        TF_CLI_ARGS: ""
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }} # Terraform relies on this predefined env 
      defaults:
        run:
          working-directory: ./iac/gcp

      steps:
        - uses: actions/checkout@v3

        - id: auth
          name: Authenticate to Google Cloud
          uses: 'google-github-actions/auth@v0'
          with:
            credentials_json: ${{ secrets.GCP_CREDENTIALS }}
            create_credentials_file: true

        - id: secrets-manager
          uses: google-github-actions/get-secretmanager-secrets@v0
          with:
            secrets: |-
              telegram-bot-token:${{ steps.auth.outputs.project_id }}/telegram_bot_token
              app-name:${{ steps.auth.outputs.project_id }}/app_name
        
        - name: Populate TF cli args
          run: |
            echo "TF_VAR_name=${{ steps.secrets-manager.outputs.app-name }}" >> $GITHUB_ENV
            echo "TF_VAR_project_id=${{ steps.auth.outputs.project_id }}" >> $GITHUB_ENV
            echo "TF_VAR_bot_token=${{ steps.secrets-manager.outputs.telegram-bot-token }}" >> $GITHUB_ENV

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2

        - name: Terraform Init 
          run: terraform init

        - name: Terraform format
          run: terraform fmt -check
  
        - name: Terraform plan
          run: terraform plan 

        - name: Terraform plan
          run: terraform plan 

        - name: Terraform Apply 
          # if: github.event_name == 'pull_request'
          run: terraform apply -auto-approve

    deploy-telegrofler-new-version:
      runs-on: ubuntu-latest
      environment: prod
      name: Deploys new version of telegrofler bot

      steps:
      - uses: 'actions/checkout@v3'

      - id: auth
        name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - id: secrets-manager
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          secrets: |-
            telegram-bot-token:${{ steps.auth.outputs.project_id }}/telegram_bot_token
            app-name:${{ steps.auth.outputs.project_id }}/app_name
    
      - id: concat-image-name
        name: Create image name with values from secrets secrets-manager
        run: |
          echo "IMAGE_NAME=eu.gcr.io/${{ steps.auth.outputs.project_id }}/${{ steps.secrets-manager.outputs.app-name }}" >> $GITHUB_ENV
          echo IMAGE_NAME = $IMAGE_NAME

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Configure Docker
        shell: bash
        run: gcloud auth configure-docker --quiet

      - name: Build Docker image
        shell: bash
        run: docker build . -t ${{ env.IMAGE_NAME }} # AK TODO should actually use env variable???

        # - Extract tests to a new job
        # - name: Test Docker image
        #   shell: bash
        #   run: docker run ${{ inputs.image-name }} sh -c "go test -v"

      - name: Push Docker image
        shell: bash
        run: docker push ${{ env.IMAGE_NAME }}
      # - id: build-and-push
      #   uses: ./.github/actions/gcp-build-and-push-image
      #   with:
      #     image-name: ${{ env.IMAGE_NAME }}
      #     credentials-json: ${{ secrets.GCP_CREDENTIALS }}

      - id: deploy
        name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ steps.secrets-manager.outputs.app-name }}
          image:  ${{ env.IMAGE_NAME }}
          region: europe-central2
          env_vars: |
            TELEGRAM_BOT_TOKEN=${{ steps.secrets-manager.outputs.telegram-bot-token }}

      - name: 'Use output'
        run: 'curl "${{ steps.deploy.outputs.url }}"'